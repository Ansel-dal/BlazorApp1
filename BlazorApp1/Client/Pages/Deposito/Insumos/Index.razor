@page "/insumos"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Insumos</h1>
<p>Descripción insumos (*)</p>
<hr />
<button class="btn btn-outline-success" @onclick="()=>add(0)">Agregar insumo</button>
<br />
<br />


<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@oRespuesta.List" TItem="Insumo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Insumo" Property="Id" Filterable="false" Title="ID" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Insumo" Property="Descripcion" Title="Descripcion" Width="100px" />
        <RadzenDataGridColumn TItem="Insumo" Property="Codigo" Title="Código" Width="100px" />
        <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="refresh" Class="m-1" Click=@(() => add(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="report" Class="m-1" Click=@(() => alertaDelete(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Click=@(() => gotoinfo(data.Id)) Text="" TextAlign="TextAlign.Left" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Insumo>> oRespuesta = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/infoinsumo/{id}");
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Insumo>>>("/api/Insumo");
        oRespuesta = respuesta;
        StateHasChanged();
    }

    async void delete(int id)
    {
        await http.DeleteAsync($"/api/Insumo/{id}");
        await Get();
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task add(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };

        var formModal = Modal.Show<AddInsumo>("Agregar insumo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await Get();
        }
    }
}