@page "/personal"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Personal</h1>
<p>Descripción personal (*)</p>
<hr />
<button class="btn btn-outline-success" @onclick="()=>add(0)">Agregar personal</button>
<br />
<br />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                AllowPaging="true" ShowPagingSummary="true"
                Data="@oRespuesta.List" TItem="Personal" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Personal" Property="Legajo" Title="Legajo" Width="100px" />
        <RadzenDataGridColumn TItem="Personal" Property="Nombres" Title="Nombres" Width="100px" />
        <RadzenDataGridColumn TItem="Personal" Property="Apellido" Title="Apellido" Width="100px" />
        <RadzenDataGridColumn TItem="Personal" Property="Dni" Title="DNI" Width="80px" />
        <RadzenDataGridColumn TItem="Personal" Property="Puesto" Title="Puesto" Width="80px" />
        <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="refresh" Click=@(() => add(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="report" Click=@(() => alertaDelete(data.Id)) Text="" TextAlign="TextAlign.Left" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Click=@(() => gotoinfo(data.Id)) Text="" TextAlign="TextAlign.Left" />
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>





@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Personal>> oRespuesta = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/Personal");
        oRespuesta = respuesta;
        StateHasChanged();
    }
    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/Personal/{id}");
        await Get();
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }


    async Task ComeBack()
    {
        nav.NavigateTo("/administracion");
    }

    async Task add(int id)
    {
        if (id != 0)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddPersonal.id), id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large

                };
            var formModal = Modal.Show<AddPersonal>("Editar Personal", parameters, options);
            var result = await formModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await Get();
            }

        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };
            var formModal = Modal.Show<AddPersonal>("Agregar Personal",options);
            var result = await formModal.Result;


            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await Get();
            }
        }
    }
    async Task gotoinfo(int id)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
            };
        parameters.Add(nameof(AddPersonal.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await Get();
        }
    }
}